; web.block_0_4017fa.8 @ 0x40182f: precondition ((= r14 (fnstart r14)), for jump)
(set-logic ALL)
(set-option :produce-models true)
(define-fun mem_readbv8 ((arg (Array (_ BitVec 64) (_ BitVec 8))) (arg0 (_ BitVec 64))) (_ BitVec 8) (select arg (bvadd arg0 #x0000000000000000)))
(define-fun mem_writebv8 ((arg1 (Array (_ BitVec 64) (_ BitVec 8))) (arg2 (_ BitVec 64)) (arg3 (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)) (store arg1 arg2 ((_ extract 7 0) arg3)))
(define-fun mem_readbv16 ((arg4 (Array (_ BitVec 64) (_ BitVec 8))) (arg5 (_ BitVec 64))) (_ BitVec 16) (concat (select arg4 (bvadd arg5 #x0000000000000001)) (select arg4 (bvadd arg5 #x0000000000000000))))
(define-fun mem_writebv16 ((arg6 (Array (_ BitVec 64) (_ BitVec 8))) (arg7 (_ BitVec 64)) (arg8 (_ BitVec 16))) (Array (_ BitVec 64) (_ BitVec 8)) (store (store arg6 arg7 ((_ extract 7 0) arg8)) (bvadd arg7 #x0000000000000001) ((_ extract 15 8) arg8)))
(define-fun mem_readbv32 ((arg9 (Array (_ BitVec 64) (_ BitVec 8))) (arg10 (_ BitVec 64))) (_ BitVec 32) (concat (concat (concat (select arg9 (bvadd arg10 #x0000000000000003)) (select arg9 (bvadd arg10 #x0000000000000002))) (select arg9 (bvadd arg10 #x0000000000000001))) (select arg9 (bvadd arg10 #x0000000000000000))))
(define-fun mem_writebv32 ((arg11 (Array (_ BitVec 64) (_ BitVec 8))) (arg12 (_ BitVec 64)) (arg13 (_ BitVec 32))) (Array (_ BitVec 64) (_ BitVec 8)) (store (store (store (store arg11 arg12 ((_ extract 7 0) arg13)) (bvadd arg12 #x0000000000000001) ((_ extract 15 8) arg13)) (bvadd (bvadd arg12 #x0000000000000001) #x0000000000000001) ((_ extract 23 16) arg13)) (bvadd (bvadd (bvadd arg12 #x0000000000000001) #x0000000000000001) #x0000000000000001) ((_ extract 31 24) arg13)))
(define-fun mem_readbv64 ((arg14 (Array (_ BitVec 64) (_ BitVec 8))) (arg15 (_ BitVec 64))) (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat (select arg14 (bvadd arg15 #x0000000000000007)) (select arg14 (bvadd arg15 #x0000000000000006))) (select arg14 (bvadd arg15 #x0000000000000005))) (select arg14 (bvadd arg15 #x0000000000000004))) (select arg14 (bvadd arg15 #x0000000000000003))) (select arg14 (bvadd arg15 #x0000000000000002))) (select arg14 (bvadd arg15 #x0000000000000001))) (select arg14 (bvadd arg15 #x0000000000000000))))
(define-fun mem_writebv64 ((arg16 (Array (_ BitVec 64) (_ BitVec 8))) (arg17 (_ BitVec 64)) (arg18 (_ BitVec 64))) (Array (_ BitVec 64) (_ BitVec 8)) (store (store (store (store (store (store (store (store arg16 arg17 ((_ extract 7 0) arg18)) (bvadd arg17 #x0000000000000001) ((_ extract 15 8) arg18)) (bvadd (bvadd arg17 #x0000000000000001) #x0000000000000001) ((_ extract 23 16) arg18)) (bvadd (bvadd (bvadd arg17 #x0000000000000001) #x0000000000000001) #x0000000000000001) ((_ extract 31 24) arg18)) (bvadd (bvadd (bvadd (bvadd arg17 #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) ((_ extract 39 32) arg18)) (bvadd (bvadd (bvadd (bvadd (bvadd arg17 #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) ((_ extract 47 40) arg18)) (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd arg17 #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) ((_ extract 55 48) arg18)) (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd arg17 #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) #x0000000000000001) ((_ extract 63 56) arg18)))
(declare-fun fpop_literal16 ((_ BitVec 16) Bool (_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_literal32 ((_ BitVec 32) Bool (_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_literal64 ((_ BitVec 64) Bool (_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_bv_bitcast_to_fp16 ((_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_bv_bitcast_to_fp32 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_bv_bitcast_to_fp64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_fp_bitcast_to_bv16 ((_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_fp_bitcast_to_bv32 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_fp_bitcast_to_bv64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_fp_convert_to_fp16_16 ((_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_fp_convert_to_fp16_32 ((_ BitVec 16)) (_ BitVec 32))
(declare-fun fpop_fp_convert_to_fp16_64 ((_ BitVec 16)) (_ BitVec 64))
(declare-fun fpop_fp_convert_to_fp32_16 ((_ BitVec 32)) (_ BitVec 16))
(declare-fun fpop_fp_convert_to_fp32_32 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_fp_convert_to_fp32_64 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun fpop_fp_convert_to_fp64_16 ((_ BitVec 64)) (_ BitVec 16))
(declare-fun fpop_fp_convert_to_fp64_32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun fpop_fp_convert_to_fp64_64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_fp_convert_to_int16_32 ((_ BitVec 16)) (_ BitVec 32))
(declare-fun fpop_fp_convert_to_int16_64 ((_ BitVec 16)) (_ BitVec 64))
(declare-fun fpop_fp_convert_to_int32_32 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_fp_convert_to_int32_64 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun fpop_fp_convert_to_int64_32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun fpop_fp_convert_to_int64_64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_int_convert_to_fp16_32 ((_ BitVec 32)) (_ BitVec 16))
(declare-fun fpop_int_convert_to_fp16_64 ((_ BitVec 64)) (_ BitVec 16))
(declare-fun fpop_int_convert_to_fp32_32 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_int_convert_to_fp32_64 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun fpop_int_convert_to_fp64_32 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun fpop_int_convert_to_fp64_64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_add16 ((_ BitVec 16) (_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_add32 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_add64 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_sub16 ((_ BitVec 16) (_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_sub32 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_sub64 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_mul16 ((_ BitVec 16) (_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_mul32 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_mul64 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_div16 ((_ BitVec 16) (_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_div32 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_div64 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_sqrt16 ((_ BitVec 16)) (_ BitVec 16))
(declare-fun fpop_sqrt32 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fpop_sqrt64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun fpop_le16 ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun fpop_le32 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun fpop_le64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun fpop_lt16 ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun fpop_lt32 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun fpop_lt64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun fpop_max16 ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun fpop_max32 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun fpop_max64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun fpop_min16 ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun fpop_min32 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun fpop_min64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun fpop_ordered16 ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun fpop_ordered32 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun fpop_ordered64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun fnstart_rax () (_ BitVec 64))
(declare-fun fnstart_rcx () (_ BitVec 64))
(declare-fun fnstart_rdx () (_ BitVec 64))
(declare-fun fnstart_rbx () (_ BitVec 64))
(declare-fun fnstart_rsp () (_ BitVec 64))
(declare-fun fnstart_rbp () (_ BitVec 64))
(declare-fun fnstart_rsi () (_ BitVec 64))
(declare-fun fnstart_rdi () (_ BitVec 64))
(declare-fun fnstart_r8 () (_ BitVec 64))
(declare-fun fnstart_r9 () (_ BitVec 64))
(declare-fun fnstart_r10 () (_ BitVec 64))
(declare-fun fnstart_r11 () (_ BitVec 64))
(declare-fun fnstart_r12 () (_ BitVec 64))
(declare-fun fnstart_r13 () (_ BitVec 64))
(declare-fun fnstart_r14 () (_ BitVec 64))
(declare-fun fnstart_r15 () (_ BitVec 64))
(declare-fun fnstart_cf () Bool)
(declare-fun fnstart_RESERVED_1 () Bool)
(declare-fun fnstart_pf () Bool)
(declare-fun fnstart_RESERVED_3 () Bool)
(declare-fun fnstart_af () Bool)
(declare-fun fnstart_RESERVED_5 () Bool)
(declare-fun fnstart_zf () Bool)
(declare-fun fnstart_sf () Bool)
(declare-fun fnstart_tf () Bool)
(declare-fun fnstart_if () Bool)
(define-fun fnstart_df () Bool false)
(declare-fun fnstart_of () Bool)
(declare-fun fnstart_iopl1 () Bool)
(declare-fun fnstart_iopl2 () Bool)
(declare-fun fnstart_nt () Bool)
(declare-fun fnstart_RESERVED_15 () Bool)
(declare-fun fnstart_rf () Bool)
(declare-fun fnstart_vm () Bool)
(declare-fun fnstart_ac () Bool)
(declare-fun fnstart_vif () Bool)
(declare-fun fnstart_vip () Bool)
(declare-fun fnstart_id () Bool)
(declare-fun fnstart_el () Bool)
(declare-fun fnstart_el0 () Bool)
(declare-fun fnstart_el1 () Bool)
(declare-fun fnstart_el2 () Bool)
(declare-fun fnstart_el3 () Bool)
(declare-fun fnstart_el4 () Bool)
(declare-fun fnstart_el5 () Bool)
(declare-fun fnstart_el6 () Bool)
(declare-fun fnstart_el7 () Bool)
(declare-fun fnstart_el8 () Bool)
(declare-fun fnstart_xmm0 () (_ BitVec 512))
(declare-fun fnstart_xmm1 () (_ BitVec 512))
(declare-fun fnstart_xmm2 () (_ BitVec 512))
(declare-fun fnstart_xmm3 () (_ BitVec 512))
(declare-fun fnstart_xmm4 () (_ BitVec 512))
(declare-fun fnstart_xmm5 () (_ BitVec 512))
(declare-fun fnstart_xmm6 () (_ BitVec 512))
(declare-fun fnstart_xmm7 () (_ BitVec 512))
(declare-fun fnstart_xmm8 () (_ BitVec 512))
(declare-fun fnstart_xmm9 () (_ BitVec 512))
(declare-fun fnstart_xmm10 () (_ BitVec 512))
(declare-fun fnstart_xmm11 () (_ BitVec 512))
(declare-fun fnstart_xmm12 () (_ BitVec 512))
(declare-fun fnstart_xmm13 () (_ BitVec 512))
(declare-fun fnstart_xmm14 () (_ BitVec 512))
(declare-fun fnstart_xmm15 () (_ BitVec 512))
(declare-fun init_mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack_alloc_min () (_ BitVec 64))
(assert (= (bvand stack_alloc_min #x0000000000000fff) #x0000000000000000))
(assert (bvult #x0000000000001000 stack_alloc_min))
(define-fun stack_guard_min () (_ BitVec 64) (bvsub stack_alloc_min #x0000000000001000))
(assert (bvult stack_guard_min stack_alloc_min))
(declare-fun stack_max () (_ BitVec 64))
(assert (= (bvand stack_max #x0000000000000fff) #x0000000000000000))
(assert (bvult stack_alloc_min stack_max))
(define-fun disjointRegions ((arg19 (_ BitVec 64)) (arg20 (_ BitVec 64))) Bool (or (bvule arg20 stack_guard_min) (bvule stack_max arg19)))
(assert (disjointRegions #x0000000000400000 #x0000000000400a58))
(assert (disjointRegions #x0000000000401000 #x0000000000401f55))
(assert (disjointRegions #x0000000000402000 #x0000000000402850))
(assert (disjointRegions #x0000000000403e10 #x0000000000406198))
(assert (bvule stack_alloc_min fnstart_rsp))
(assert (bvule fnstart_rsp (bvsub stack_max #x0000000000000008)))
(define-fun on_stack ((arg21 (_ BitVec 64)) (arg22 (_ BitVec 64))) Bool (let ((e (bvadd arg21 arg22))) (and (bvule stack_guard_min arg21) (and (bvule arg21 e) (bvule e stack_max)))))
(define-fun not_in_stack_range ((arg23 (_ BitVec 64)) (arg24 (_ BitVec 64))) Bool (let ((e0 (bvadd arg23 arg24))) (and (bvule arg23 e0) (or (bvule e0 stack_alloc_min) (bvule stack_max arg23)))))
(assert (bvult fnstart_rsp (bvsub stack_max #x0000000000000008)))
(assert (= (bvand (bvadd fnstart_rsp #x0000000000000008) #x000000000000000f) #x0000000000000000))
(define-fun is_in_mc_only_stack_range ((arg25 (_ BitVec 64)) (arg26 (_ BitVec 64))) Bool (let ((e1 (bvadd arg25 arg26))) (on_stack arg25 arg26)))
(declare-fun a0x4017fa_rax () (_ BitVec 64))
(declare-fun a0x4017fa_rcx () (_ BitVec 64))
(declare-fun a0x4017fa_rdx () (_ BitVec 64))
(declare-fun a0x4017fa_rbx () (_ BitVec 64))
(declare-fun a0x4017fa_rsp () (_ BitVec 64))
(declare-fun a0x4017fa_rbp () (_ BitVec 64))
(declare-fun a0x4017fa_rsi () (_ BitVec 64))
(declare-fun a0x4017fa_rdi () (_ BitVec 64))
(declare-fun a0x4017fa_r8 () (_ BitVec 64))
(declare-fun a0x4017fa_r9 () (_ BitVec 64))
(declare-fun a0x4017fa_r10 () (_ BitVec 64))
(declare-fun a0x4017fa_r11 () (_ BitVec 64))
(declare-fun a0x4017fa_r12 () (_ BitVec 64))
(declare-fun a0x4017fa_r13 () (_ BitVec 64))
(declare-fun a0x4017fa_r14 () (_ BitVec 64))
(declare-fun a0x4017fa_r15 () (_ BitVec 64))
(declare-fun a0x4017fa_cf () Bool)
(declare-fun a0x4017fa_RESERVED_1 () Bool)
(declare-fun a0x4017fa_pf () Bool)
(declare-fun a0x4017fa_RESERVED_3 () Bool)
(declare-fun a0x4017fa_af () Bool)
(declare-fun a0x4017fa_RESERVED_5 () Bool)
(declare-fun a0x4017fa_zf () Bool)
(declare-fun a0x4017fa_sf () Bool)
(declare-fun a0x4017fa_tf () Bool)
(declare-fun a0x4017fa_if () Bool)
(define-fun a0x4017fa_df () Bool false)
(declare-fun a0x4017fa_of () Bool)
(declare-fun a0x4017fa_iopl1 () Bool)
(declare-fun a0x4017fa_iopl2 () Bool)
(declare-fun a0x4017fa_nt () Bool)
(declare-fun a0x4017fa_RESERVED_15 () Bool)
(declare-fun a0x4017fa_rf () Bool)
(declare-fun a0x4017fa_vm () Bool)
(declare-fun a0x4017fa_ac () Bool)
(declare-fun a0x4017fa_vif () Bool)
(declare-fun a0x4017fa_vip () Bool)
(declare-fun a0x4017fa_id () Bool)
(declare-fun a0x4017fa_el () Bool)
(declare-fun a0x4017fa_el0 () Bool)
(declare-fun a0x4017fa_el1 () Bool)
(declare-fun a0x4017fa_el2 () Bool)
(declare-fun a0x4017fa_el3 () Bool)
(declare-fun a0x4017fa_el4 () Bool)
(declare-fun a0x4017fa_el5 () Bool)
(declare-fun a0x4017fa_el6 () Bool)
(declare-fun a0x4017fa_el7 () Bool)
(declare-fun a0x4017fa_el8 () Bool)
(declare-fun a0x4017fa_xmm0 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm1 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm2 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm3 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm4 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm5 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm6 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm7 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm8 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm9 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm10 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm11 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm12 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm13 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm14 () (_ BitVec 512))
(declare-fun a0x4017fa_xmm15 () (_ BitVec 512))
(define-fun %arg0 () (_ BitVec 64) fnstart_rdi)
(define-fun %arg1 () (_ BitVec 64) fnstart_rsi)
(declare-fun %t220 () (_ BitVec 64))
(declare-fun %t221 () (_ BitVec 64))
(declare-fun %t222 () (_ BitVec 64))
(declare-fun %t223 () (_ BitVec 32))
(declare-fun %t224 () (_ BitVec 32))
(declare-fun %t225 () (_ BitVec 32))
(assert (= %t220 a0x4017fa_rax))
(assert (= %t221 (mem_readbv64 init_mem (bvsub fnstart_rsp #x0000000000000040))))
(assert (= %t222 (mem_readbv64 init_mem (bvsub fnstart_rsp #x0000000000000028))))
(assert (= %t223 (mem_readbv32 init_mem (bvsub fnstart_rsp #x000000000000001c))))
(assert (= %t224 (mem_readbv32 init_mem (bvsub fnstart_rsp #x0000000000000010))))
(assert (= %t225 (mem_readbv32 init_mem (bvsub fnstart_rsp #x000000000000000c))))
(assert (= a0x4017fa_rbx fnstart_rbx))
(assert (= a0x4017fa_rsp (bvsub fnstart_rsp #x0000000000000048)))
(assert (= a0x4017fa_rbp (bvsub fnstart_rsp #x0000000000000008)))
(assert (= a0x4017fa_r12 fnstart_r12))
(assert (= a0x4017fa_r13 fnstart_r13))
(assert (= a0x4017fa_r14 fnstart_r14))
(assert (= a0x4017fa_r15 fnstart_r15))
(assert (= (mem_readbv64 init_mem (bvsub fnstart_rsp #x0000000000000008)) fnstart_rbp))
; LLVM:     %t226 = sext i32 %t223 to i64
(define-fun %t226 () (_ BitVec 64) ((_ sign_extend 32) %t223))
; LLVM:     %t227 = sub i64 %t226, %t220
(define-fun %t227 () (_ BitVec 64) (bvsub %t226 %t220))
; LLVM:     %t228 = add i64 %t227, 4211152
(define-fun %t228 () (_ BitVec 64) (bvadd %t227 #x00000000004041d0))
; LLVM:     %t229 = shl i64 %t222, 4
(define-fun %t229 () (_ BitVec 64) (bvshl %t222 #x0000000000000004))
; LLVM:     %t230 = add i64 %t229, 4210944
(define-fun %t230 () (_ BitVec 64) (bvadd %t229 #x0000000000404100))
; LLVM:     %t231 = inttoptr i64 %t230 to i64*
(define-fun %t231 () (_ BitVec 64) %t230)
; LLVM:     %t232 = load i64* %t231, align 0
(define-fun addr () (_ BitVec 64) (bvadd a0x4017fa_rbp #xffffffffffffffd0))
(assert (is_in_mc_only_stack_range addr #x0000000000000008))
(define-fun mem () (Array (_ BitVec 64) (_ BitVec 8)) (mem_writebv64 init_mem addr a0x4017fa_rax))
(define-fun addr0 () (_ BitVec 64) (bvadd a0x4017fa_rbp #xffffffffffffffec))
(declare-fun readv () (_ BitVec 32))
(assert (on_stack addr0 #x0000000000000004))
(assert (= readv (mem_readbv32 mem addr0)))
(define-fun rax () (_ BitVec 64) ((_ sign_extend 32) readv))
(define-fun addr1 () (_ BitVec 64) (bvadd a0x4017fa_rbp #xffffffffffffffd0))
(declare-fun readv0 () (_ BitVec 64))
(assert (on_stack addr1 #x0000000000000008))
(assert (= readv0 (mem_readbv64 mem addr1)))
(define-fun rax0 () (_ BitVec 64) ((_ extract 63 0) (bvadd (bvadd (concat #b0 (bvxor readv0 #xffffffffffffffff)) #b00000000000000000000000000000000000000000000000000000000000000001) (concat #b0 rax))))
(define-fun rdi () (_ BitVec 64) ((_ extract 63 0) (bvadd (concat #b0 rax0) #b00000000000000000000000000000000000000000010000000100000111010000)))
(define-fun addr2 () (_ BitVec 64) (bvadd a0x4017fa_rbp #xffffffffffffffe0))
(declare-fun readv1 () (_ BitVec 64))
(assert (on_stack addr2 #x0000000000000008))
(assert (= readv1 (mem_readbv64 mem addr2)))
(define-fun rcx () (_ BitVec 64) ((_ extract 63 0) ((_ extract 64 0) (bvshl (concat #b0 readv1) #b00000000000000000000000000000000000000000000000000000000000000100))))
(define-fun rax1 () (_ BitVec 64) ((_ extract 63 0) (bvadd (concat #b0 rcx) #b00000000000000000000000000000000000000000010000000100000100000000)))
(define-fun addr3 () (_ BitVec 64) (bvadd rax1 #x0000000000000000))
(declare-fun readv2 () (_ BitVec 64))
(assert (= addr3 %t231))
(assert (not_in_stack_range addr3 #x0000000000000040))
(assert (= readv2 (mem_readbv64 mem addr3)))
(define-fun %t232 () (_ BitVec 64) (mem_readbv64 mem addr3))
; LLVM:     %t233 = call i64 @strncmp (i64 %t228,i64 %t232,i64 %t220)
(define-fun addr4 () (_ BitVec 64) (bvadd a0x4017fa_rbp #xffffffffffffffd0))
(declare-fun readv3 () (_ BitVec 64))
(assert (on_stack addr4 #x0000000000000008))
(assert (= readv3 (mem_readbv64 mem addr4)))
(define-fun rsp () (_ BitVec 64) (bvsub a0x4017fa_rsp #x0000000000000008))
(define-fun addr5 () (_ BitVec 64) (bvsub a0x4017fa_rsp #x0000000000000008))
(assert (is_in_mc_only_stack_range addr5 #x0000000000000008))
(define-fun mem0 () (Array (_ BitVec 64) (_ BitVec 8)) (mem_writebv64 mem addr5 #x0000000000401834))
(assert (= %t228 rdi))
(assert (= %t232 readv2))
(assert (= %t220 readv3))
(assert (not a0x4017fa_df))
(assert (= (mem_readbv64 mem0 rsp) #x0000000000401834))
(declare-fun a0x401834_xmm15 () (_ BitVec 512))
(declare-fun a0x401834_xmm14 () (_ BitVec 512))
(declare-fun a0x401834_xmm13 () (_ BitVec 512))
(declare-fun a0x401834_xmm12 () (_ BitVec 512))
(declare-fun a0x401834_xmm11 () (_ BitVec 512))
(declare-fun a0x401834_xmm10 () (_ BitVec 512))
(declare-fun a0x401834_xmm9 () (_ BitVec 512))
(declare-fun a0x401834_xmm8 () (_ BitVec 512))
(declare-fun a0x401834_xmm7 () (_ BitVec 512))
(declare-fun a0x401834_xmm6 () (_ BitVec 512))
(declare-fun a0x401834_xmm5 () (_ BitVec 512))
(declare-fun a0x401834_xmm4 () (_ BitVec 512))
(declare-fun a0x401834_xmm3 () (_ BitVec 512))
(declare-fun a0x401834_xmm2 () (_ BitVec 512))
(declare-fun a0x401834_xmm1 () (_ BitVec 512))
(declare-fun a0x401834_xmm0 () (_ BitVec 512))
(declare-fun a0x401834_el8 () Bool)
(declare-fun a0x401834_el7 () Bool)
(declare-fun a0x401834_el6 () Bool)
(declare-fun a0x401834_el5 () Bool)
(declare-fun a0x401834_el4 () Bool)
(declare-fun a0x401834_el3 () Bool)
(declare-fun a0x401834_el2 () Bool)
(declare-fun a0x401834_el1 () Bool)
(declare-fun a0x401834_el0 () Bool)
(declare-fun a0x401834_el () Bool)
(declare-fun a0x401834_id () Bool)
(declare-fun a0x401834_vip () Bool)
(declare-fun a0x401834_vif () Bool)
(declare-fun a0x401834_ac () Bool)
(declare-fun a0x401834_vm () Bool)
(declare-fun a0x401834_rf () Bool)
(declare-fun a0x401834_RESERVED_15 () Bool)
(declare-fun a0x401834_nt () Bool)
(declare-fun a0x401834_iopl2 () Bool)
(declare-fun a0x401834_iopl1 () Bool)
(declare-fun a0x401834_of () Bool)
(define-fun a0x401834_df () Bool false)
(declare-fun a0x401834_if () Bool)
(declare-fun a0x401834_tf () Bool)
(declare-fun a0x401834_sf () Bool)
(declare-fun a0x401834_zf () Bool)
(declare-fun a0x401834_RESERVED_5 () Bool)
(declare-fun a0x401834_af () Bool)
(declare-fun a0x401834_RESERVED_3 () Bool)
(declare-fun a0x401834_pf () Bool)
(declare-fun a0x401834_RESERVED_1 () Bool)
(declare-fun a0x401834_cf () Bool)
(declare-fun a0x401834_r15 () (_ BitVec 64))
(declare-fun a0x401834_r14 () (_ BitVec 64))
(declare-fun a0x401834_r13 () (_ BitVec 64))
(declare-fun a0x401834_r12 () (_ BitVec 64))
(declare-fun a0x401834_r11 () (_ BitVec 64))
(declare-fun a0x401834_r10 () (_ BitVec 64))
(declare-fun a0x401834_r9 () (_ BitVec 64))
(declare-fun a0x401834_r8 () (_ BitVec 64))
(declare-fun a0x401834_rdi () (_ BitVec 64))
(declare-fun a0x401834_rsi () (_ BitVec 64))
(declare-fun a0x401834_rbp () (_ BitVec 64))
(declare-fun a0x401834_rsp () (_ BitVec 64))
(declare-fun a0x401834_rbx () (_ BitVec 64))
(declare-fun a0x401834_rdx () (_ BitVec 64))
(declare-fun a0x401834_rcx () (_ BitVec 64))
(declare-fun a0x401834_rax () (_ BitVec 64))
(declare-fun mem1 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (eqrange mem1 mem0 (bvadd rsp #x0000000000000008) (bvadd fnstart_rsp #x0000000000000007)))
(define-fun %t233 () (_ BitVec 64) a0x401834_rax)
; LLVM:     jump label %block_0_401834
(assert true)
(assert (= a0x401834_df false))
(assert (= %t233 a0x401834_rax))
(assert (= %t221 (mem_readbv64 mem1 (bvsub fnstart_rsp #x0000000000000040))))
(assert (= %t222 (mem_readbv64 mem1 (bvsub fnstart_rsp #x0000000000000028))))
(assert (= %t223 (mem_readbv32 mem1 (bvsub fnstart_rsp #x000000000000001c))))
(assert (= %t224 (mem_readbv32 mem1 (bvsub fnstart_rsp #x0000000000000010))))
(assert (= %t225 (mem_readbv32 mem1 (bvsub fnstart_rsp #x000000000000000c))))
(assert (= a0x4017fa_rbx fnstart_rbx))
(assert (= (bvadd rsp #x0000000000000008) (bvsub fnstart_rsp #x0000000000000048)))
(assert (= a0x4017fa_rbp (bvsub fnstart_rsp #x0000000000000008)))
(assert (= a0x4017fa_r12 fnstart_r12))
(assert (= a0x4017fa_r13 fnstart_r13))
(check-sat-assuming ((not (= a0x4017fa_r14 fnstart_r14))))
(exit)
