; Original cvc5 Rewrites

;done   (define-rule bool-double-not-elim ((t Bool)) (not (not t)) t)

;(define-rule bool-eq-true ((t Bool)) (= t true) t)
;(define-rule bool-eq-false ((t Bool)) (= t false) (not t))
;(define-rule bool-eq-nrefl ((x Bool)) (= x (not x)) false)

;done   (define-rule bool-impl-false1 ((t Bool)) (=> t false) (not t))              
;done   (define-rule bool-impl-false2 ((t Bool)) (=> false t) true)                 
;done   (define-rule bool-impl-true1 ((t Bool)) (=> t true) true)                   
;done   (define-rule bool-impl-true2 ((t Bool)) (=> true t) t)                      
;(define-rule bool-impl-elim ((t Bool) (s Bool)) (=> t s) (or (not t) s))

;done   (define-rule bool-or-true ((xs Bool :list) (ys Bool :list)) (or xs true ys) true)
;done   (define-rule* bool-or-false ((xs Bool :list) (ys Bool :list)) (or xs false ys) (or xs ys))
;(define-rule* bool-or-flatten ((xs Bool :list) (b Bool) (ys Bool :list) (zs Bool :list)) (or xs (or b ys) zs) (or xs b ys zs))
;done   (define-rule* bool-or-dup ((xs Bool :list) (b Bool) (ys Bool :list) (zs Bool :list)) (or xs b ys b zs) (or xs b ys zs))

;done   (define-rule* bool-and-true ((xs Bool :list) (ys Bool :list)) (and xs true ys) (and xs ys))
;done   (define-rule bool-and-false ((xs Bool :list) (ys Bool :list)) (and xs false ys) false)
;(define-rule* bool-and-flatten ((xs Bool :list) (b Bool) (ys Bool :list) (zs Bool :list)) (and xs (and b ys) zs) (and xs b ys zs))
;done   (define-rule* bool-and-dup ((xs Bool :list) (b Bool) (ys Bool :list) (zs Bool :list)) (and xs b ys b zs) (and xs b ys zs))

;done   (define-rule bool-and-conf ((xs Bool :list) (w Bool) (ys Bool :list) (zs Bool :list)) (and xs w ys (not w) zs) false)
;done   (define-rule bool-or-taut ((xs Bool :list) (w Bool) (ys Bool :list) (zs Bool :list)) (or xs w ys (not w) zs) true)

;(define-rule bool-xor-refl ((x Bool)) (xor x x) false)
;(define-rule bool-xor-nrefl ((x Bool)) (xor x (not x)) true)
;(define-rule bool-xor-false ((x Bool)) (xor x false) x)
;(define-rule bool-xor-true ((x Bool)) (xor x true) (not x))
;(define-rule bool-xor-comm ((x Bool) (y Bool)) (xor x y) (xor y x))
;(define-rule bool-xor-elim ((x Bool) (y Bool)) (xor x y) (not (= x y)))

;(define-cond-rule ite-neg-branch ((c Bool) (x Bool) (y Bool)) (= (not y) x) (ite c x y) (= c x))

;done   (define-rule ite-then-true ((c Bool) (x Bool)) (ite c true x) (or c x))
;done   (define-rule ite-else-false ((c Bool) (x Bool)) (ite c x false) (and c x))
;done   (define-rule ite-then-false ((c Bool) (x Bool)) (ite c false x) (and (not c) x))
;done   (define-rule ite-else-true ((c Bool) (x Bool)) (ite c x true) (or (not c) x))

;(define-rule ite-then-lookahead-self ((c Bool) (x Bool)) (ite c c x) (ite c true x))
;(define-rule ite-else-lookahead-self ((c Bool) (x Bool)) (ite c x c) (ite c x false))


; VeriT Rewrites

(define-rule connective_def1 ((x Bool) (y Bool)) (xor x y) (or (and (not x) y) (and x (not y))))
(define-rule connective_def3 ((c Bool) (x Bool) (y Bool)) (ite c x y) (and (=> c x) (=> (not c) y)))

(define-rule and_simplify1-1 ((x Bool)) (and true x) x)
(define-rule and_simplify1-2 ((x Bool)) (and x true) x)
(define-rule* and_simplify2 ((xs Bool :list) (ys Bool :list)) (and xs true ys) (and xs ys))
(define-rule* and_simplify3 ((x Bool) (xs Bool :list) (ys Bool :list) (zs Bool :list)) (and xs x ys x zs) (and xs x ys zs))
(define-rule* and_simplify4 ((xs Bool :list) (ys Bool :list)) (and xs false ys) false)
(define-rule* and_simplify5-1 ((x Bool) (xs Bool :list) (ys Bool :list) (zs Bool :list)) (and xs x ys (not x) zs) false)
(define-rule* and_simplify5-2 ((x Bool) (xs Bool :list) (ys Bool :list) (zs Bool :list)) (and xs (not x) ys x zs) false)

(define-rule or_simplify1-1 ((x Bool)) (or false x) x)
(define-rule or_simplify1-2 ((x Bool)) (or x false) x)
(define-rule* or_simplify2 ((xs Bool :list) (ys Bool :list)) (or xs false ys) (or xs ys))
(define-rule* or_simplify3 ((x Bool) (xs Bool :list) (ys Bool :list) (zs Bool :list)) (or xs x ys x zs) (or xs x ys zs))
(define-rule* or_simplify4 ((xs Bool :list) (ys Bool :list)) (or xs true ys) true)
(define-rule* or_simplify5-1 ((x Bool) (xs Bool :list) (ys Bool :list) (zs Bool :list)) (or xs x ys (not x) zs) true)
(define-rule* or_simplify5-2 ((x Bool) (xs Bool :list) (ys Bool :list) (zs Bool :list)) (or xs (not x) ys x zs) true)

(define-rule not_simplify1 ((x Bool)) (not (not x)) x)
(define-rule not_simplify2 () (not false) true)
(define-rule not_simplify3 () (not true) false)

(define-rule implies_simplify1 ((x Bool) (y Bool)) (=> (not x) (not y)) (=> y x))
(define-rule implies_simplify2 ((x Bool)) (=> false x) true)
(define-rule implies_simplify3 ((x Bool)) (=> x true) true)
(define-rule implies_simplify4 ((x Bool)) (=> true x) x)
(define-rule implies_simplify5 ((x Bool)) (=> x false) (not x))
(define-rule implies_simplify6 ((x Bool)) (=> x x) true)
(define-rule implies_simplify7 ((x Bool)) (=> (not x) x) x)
(define-rule implies_simplify8 ((x Bool)) (=> x (not x)) (not x))

(define-rule bool_simplify1 ((x Bool) (y Bool)) (not (=> x y)) (and x (not y)))
(define-rule bool_simplify2 ((x Bool) (y Bool)) (not (or x y)) (and (not x) (not y)))
(define-rule bool_simplify3 ((x Bool) (y Bool)) (not (and x y)) (or (not x) (not y)))
(define-rule bool_simplify4 ((x Bool) (y Bool) (z Bool)) (=> x (=> y z)) (=> (and x y) z))
(define-rule bool_simplify5 ((x Bool) (y Bool)) (=> (=> x y) y) (or x y))
(define-rule bool_simplify6 ((x Bool) (y Bool)) (and x (=> x y)) (and x y))
(define-rule bool_simplify7 ((x Bool) (y Bool)) (and (=> x y) x) (and x y))

